apply plugin: "com.android.application"

project.ext.envConfigFiles = [
    dev: ".env.dev",
    sit: ".env.sit",
    stg: ".env.stg",
    uat: ".env.uat",
    prod: ".env.prod",
    sb: ".env.sb",
    cind: ".env.cind",
    kldc: ".env.kldc",
    ntt: ".env.ntt",
    huaweisit: ".env.huaweisit", // SIT Huawei
    huaweiuat: ".env.huaweiuat", // UAT Huawei
    huaweistg: ".env.huaweistg", // STG Huawei
    huaweiprod: ".env.huaweiprod", // Prod Huawei
]
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply plugin: "com.google.firebase.firebase-perf"

def isHuawei = getGradle().getStartParameter().getTaskNames().toString().toLowerCase().contains("huawei")

if (isHuawei) {
    apply plugin: 'com.huawei.agconnect'
    agcp{
        manifest false
    }
}

import com.android.build.OutputFile
 
/**
* The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
* and bundleReleaseJsAndAssets).
* These basically call `react-native bundle` with the correct arguments during the Android build
* cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
* bundle directly from the development server. Below you can see all the possible configurations
* and their defaults. If you decide to add a configuration block, make sure to add it before the
* `apply from: "../../node_modules/react-native/react.gradle"` line.
*
* project.ext.react = [
*   // the name of the generated asset file containing your JS bundle
*   bundleAssetName: "index.android.bundle",
*
*   // the entry file for bundle generation. If none specified and
*   // "index.android.js" exists, it will be used. Otherwise "index.js" is
*   // default. Can be overridden with ENTRY_FILE environment variable.
*
*   // whether to bundle JS and assets in debug mode
*   bundleInDebug: false,
*
*   // whether to bundle JS and assets in release mode
*   bundleInRelease: true,
*
*   // whether to bundle JS and assets in another build variant (if configured).
*   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
*   // The configuration property can be in the following formats
*   //         'bundleIn${productFlavor}${buildType}'
*   //         'bundleIn${buildType}'
*   // bundleInFreeDebug: true,
*   // bundleInPaidRelease: true,
*   // bundleInBeta: true,
*
*   // whether to disable dev mode in custom build variants (by default only disabled in release)
*   // for example: to disable dev mode in the staging build type (if configured)
*   devDisabledInStaging: true,
*   // The configuration property can be in the following formats
*   //         'devDisabledIn${productFlavor}${buildType}'
*   //         'devDisabledIn${buildType}'
*
*   // the root of your project, i.e. where "package.json" lives
*   root: "../../",
*
*   // where to put the JS bundle asset in debug mode
*   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
*
*   // where to put the JS bundle asset in release mode
*   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
*
*   // where to put drawable resources / React Native assets, e.g. the ones you use via
*   // require('./image.png')), in debug mode
*   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
*
*   // where to put drawable resources / React Native assets, e.g. the ones you use via
*   // require('./image.png')), in release mode
*   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
*
*   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
*   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
*   // date; if you have any other folders that you want to ignore for performance reasons (gradle
*   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
*   // for example, you might want to remove it from here.
*   inputExcludes: ["android/**", "ios/**"],
*
*   // override which node gets called and with what additional arguments
*   nodeExecutableAndArgs: ["node"],
*
*   // supply additional arguments to the packager
*   extraPackagerArgs: []
* ]
*/
 
project.ext.react = [
    entryFile: "index.js",
    // bundleCommand: "ram-bundle",
    bundleInRelease: true,
    enableHermes: true,  // clean and rebuild if changing
]
 
apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/@sentry/react-native/sentry.gradle"
apply plugin: "com.bugsnag.android.gradle"
 
/**
* Set this to true to create two separate APKs instead of one:
*   - An APK that only works on ARM devices
*   - An APK that only works on x86 devices
* The advantage is the size of the APK is reduced by about 4MB.
* Upload all the APKs to the Play Store and people will download
* the correct one based on the CPU architecture of their device.
*/
def enableSeparateBuildPerCPUArchitecture = true
 
/**
* Run Proguard to shrink the Java bytecode in release builds.
*/
def enableProguardInReleaseBuilds = true

def app_name = "MAE"
def app_name_uat = "MAE (UAT)"
def app_name_sit = "MAE (SIT)"
def app_name_stg = "MAE (STG)"
def app_name_dev = "MAE (DEV)"
def app_name_sb = "MAE (SB)"
def app_name_cind = "MAE (CIND)"
def app_name_kldc = "MAE (KLDC)"
def app_name_ntt = "MAE (NTT)"
def applicationIdPackage = "com.maybank2u.life"

/**
* The preferred build flavor of JavaScriptCore.
*
* For example, to use the international variant, you can use:
* `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
*
* The international variant includes ICU i18n library and necessary data
* allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
* give correct results when using with locales other than en-US.  Note that
* this variant is about 6MiB larger per architecture than default.
*/
def jscFlavor = 'org.webkit:android-jsc:+'

/**
* Whether to enable the Hermes VM.
*
* This should be set on project.ext.react and mirrored here.  If it is not set
* on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
* and the benefits of using Hermes will therefore be sharply reduced.
*/
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
       debug {
           storeFile file('debug.keystore')
           storePassword 'android'
           keyAlias 'androiddebugkey'
           keyPassword 'android'
        }
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }       
        }

        debugHuawei {
            storeFile file(MYAPP_HUAWEI_UPLOAD_STORE_FILE)
            storePassword MYAPP_HUAWEI_UPLOAD_STORE_PASSWORD
            keyAlias MYAPP_HUAWEI_UPLOAD_KEY_ALIAS
            keyPassword MYAPP_HUAWEI_UPLOAD_KEY_PASSWORD
        }
        releaseHuawei {
            if (project.hasProperty('MYAPP_HUAWEI_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_HUAWEI_UPLOAD_STORE_FILE)
                storePassword MYAPP_HUAWEI_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_HUAWEI_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_HUAWEI_UPLOAD_KEY_PASSWORD
            }
        }
    }
    defaultConfig {
        //applicationId "com.maybank2u.life"
        applicationId project.env.get("APP_ID")
        resValue "string", "build_config_package", "com.maybank2u.life"

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 217
        versionName '0.9.18'
        multiDexEnabled true

        // ndk { abiFilters "arm64-v8a", "x86", "x86_64", "armeabi-v7a"  }
        packagingOptions {
            exclude "**/arm64-v8a/libkaliumjni.so"
            pickFirst '**/libjsc.so'
            pickFirst '**/libc++_shared.so'
            exclude 'META-INF/androidx.exifinterface_exifinterface.version'
        }
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true

        missingDimensionStrategy 'react-native-camera', 'mlkit'
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    aaptOptions { noCompress "tflite" }
    flavorDimensions "version"
    productFlavors{
        dev{
            signingConfig signingConfigs.release
            dimension "version"
            resValue "string", "app_name", app_name_dev
        }
        sit{
            signingConfig signingConfigs.release
            dimension "version"
            resValue "string", "app_name", app_name_sit
        }
        stg{
            signingConfig signingConfigs.release
            dimension "version"
            resValue "string", "app_name", app_name_stg
        }
        uat{
            signingConfig signingConfigs.release
            dimension "version"
            resValue "string", "app_name", app_name_uat
        }
        prod{
            signingConfig signingConfigs.release
            dimension "version"
            resValue "string", "app_name", app_name
        }
        sb{
            signingConfig signingConfigs.release
            dimension "version"
            resValue "string", "app_name", app_name_sb
        }
        cind{
            signingConfig signingConfigs.release
            dimension "version"
            resValue "string", "app_name", app_name_cind
        }
        kldc{
            signingConfig signingConfigs.release
            dimension "version"
            resValue "string", "app_name", app_name_kldc
        }
        ntt{
            signingConfig signingConfigs.release
            dimension "version"
            resValue "string", "app_name", app_name_ntt
        }
        huaweisit
        {
            signingConfig signingConfigs.releaseHuawei
            dimension "version"
            applicationIdSuffix ".huawei.sit"
            resValue "string", "app_name", app_name_sit
        }
        huaweiuat
        {
            signingConfig signingConfigs.releaseHuawei
            dimension "version"
            applicationIdSuffix ".huawei.uat"
            resValue "string", "app_name", app_name_uat
        }
        huaweistg
        {
            signingConfig signingConfigs.releaseHuawei
            dimension "version"
            applicationIdSuffix ".huawei" //staging also refers to the prod env
            resValue "string", "app_name", app_name_stg
        }
        huaweiprod
        {
            signingConfig signingConfigs.releaseHuawei
            dimension "version"
            applicationIdSuffix ".huawei"
            resValue "string", "app_name", app_name
        }

    }
    buildTypes {
        debug {
            getGradle().getStartParameter().getTaskNames().each { task ->
                if (task.toLowerCase().contains("huawei")) {
                    signingConfig signingConfigs.debugHuawei
                    resValue "string", "CERTIFICATE_SHA1", "9CC99C18D6E5F4C525734416FDEFB18644EE9BA1"
                } else {
                    signingConfig signingConfigs.debug
                    resValue "string", "CERTIFICATE_SHA1", "9CC99C18D6E5F4C525734416FDEFB18644EE9BA1"
                }
            }
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            getGradle().getStartParameter().getTaskNames().each { task ->
                if (task.toLowerCase().contains("huawei")) {
                    signingConfig signingConfigs.releaseHuawei
                    if(task.toLowerCase().contains("bundle")) 
                        resValue "string", "CERTIFICATE_SHA1", "E1AA71879E8BF8DF9A3A72EDEFEDFB2238A34B2B" //AAB
                    else 
                        resValue "string", "CERTIFICATE_SHA1", "55EADF3E02F54010E0958BC64830C3A54D8667C2" //APK
                } else {
                    signingConfig signingConfigs.release
                    if(task.toLowerCase().contains("bundle"))
                        resValue "string", "CERTIFICATE_SHA1", "B838E39FA086D3A5F9EA9DD3EFC7939E7609FEA9" //AAB
                    else
                        resValue "string", "CERTIFICATE_SHA1", "5F8881DB74350CD65CA84CA596BFF3032A58E57E" //APK
                }
            }
        }
    }
    //  applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
             def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride = versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    buildToolsVersion rootProject.ext.buildToolsVersion
}

dependencies {
    implementation 'com.huawei.agconnect:agconnect-core:1.5.2.300'
    implementation "com.huawei.agconnect:datastore-core:1.7.1.300"
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //noinspection GradleDynamicVersion
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    // Flipper stuff
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.annotation:annotation:1.0.2'
    
    implementation 'com.facebook.react:react-native:+'
    // From node_modules
    implementation 'com.facebook.fresco:fresco:2.5.0'
    implementation 'com.facebook.fresco:animated-gif:2.5.0'
    implementation 'com.facebook.fresco:animated-base-support:1.3.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    // firebase ML for ekyc

    implementation 'org.tensorflow:tensorflow-lite-support:0.2.0'
    implementation 'androidx.security:security-crypto:1.1.0-alpha03'

    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:16.1.1'
    implementation 'com.google.mlkit:barcode-scanning:16.0.3'
    implementation 'com.google.mlkit:face-detection:16.0.2'

    implementation 'com.rmtheis:tess-two:9.0.0'
    // firebase
    implementation "com.google.firebase:firebase-core:21.1.1"
    implementation "com.google.firebase:firebase-messaging:23.0.8"
    implementation 'com.google.android.gms:play-services-gcm:17.0.0'
    implementation 'com.google.android.gms:play-services-vision:18.0.0'
    implementation('com.google.android.gms:play-services-auth:20.4.1') {
        force = true
    }
    // implementation('com.google.android.gms:play-services-fitness:16.0.1') {
    //     force = true
    // }
    implementation "com.google.android.gms:play-services-base:18.1.0"
    implementation "com.google.android.gms:play-services-maps:18.0.2"

    // imported by sodium package
    // implementation 'com.github.joshjdevl.libsodiumjni:libsodium-jni-aar:1.0.8'

    // imported by the ekyc package
    // implementation files('libs/EzIdp.jar')
    // implementation files('libs/ezlogger-debug.aar')
    implementation 'com.google.firebase:firebase-analytics:21.2.0'
    // implementation 'com.google.firebase:firebase-dynamic-links:17.0.0'
    implementation "com.google.firebase:firebase-invites:17.0.0"
    implementation "com.google.firebase:firebase-perf:20.1.1"
    implementation 'com.google.firebase:firebase-crashlytics:18.3.5'
    //implementation 'com.huawei.hms:hianalytics:5.3.1.300'
    implementation 'com.huawei.agconnect:agconnect-crash:1.5.2.300'
    implementation project(':react-native-hms-analytics')
    implementation project(':react-native-hms-push')
    implementation project(':react-native-hms-availability')

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

 
// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
 

bugsnag {
  uploadReactNativeMappings = true
}
